name: Beanstalk Workflow

on:
  push:
    branches:
      - master
      
env:
  AWS_REGION: us-east-1 # AWS region
  S3_BUCKET: projects-artifacts-rico # S3 bucket for storing the build artifacts
  EB_APPLICATION_NAME_PROD: myapp # Elastic Beanstalk application name
  EB_ENVIRONMENT_NAME_PROD: myapp-env # Elastic Beanstalk environment name
  EB_APPLICATION_NAME_STAGE: Elastic-beanstalk-1-env # Elastic Beanstalk application name
  EB_ENVIRONMENT_NAME_STAGE: Elastic-beanstalk-1-env
 # Elastic Beanstalk environment name
  PIPELINE_ID: ${{ github.run_id }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and push docker image to ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.EB_APPLICATION_NAME_PROD }}
          IMAGE_TAG: ${{ env.PIPELINE_ID }}
        run: |
          docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      - name: Create Dockerrun.aws.json
        run: |
          cat > Dockerrun.aws.json << EOF
          {
            "AWSEBDockerrunVersion": "1",
            "Image": {
              "Name": "${{ steps.login-ecr.outputs.registry }}/${{ env.EB_APPLICATION_NAME_PROD }}:${{ env.PIPELINE_ID }}",
              "Update": "true"
            },
            "Ports": [
              {
                "ContainerPort": 3000,
                "HostPort": 80
              }
            ]
          }
          EOF

      - name: Zip Artifacts
        run: |
          zip -r artifacts.zip .

      - name: Upload Artifacts to S3
        run: |
          aws s3 cp artifacts.zip s3://${{ env.S3_BUCKET }}/artifacts/${{ env.PIPELINE_ID }}/source-code.zip
          aws s3 cp Dockerrun.aws.json s3://${{ env.S3_BUCKET }}/artifacts/${{ env.PIPELINE_ID }}/Dockerrun.aws.json

  deploy-stage:
    name: Staging Deploy #Deploy to Staging Environment with Source Code
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Create new Elastic Beanstalk application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME_STAGE }} \
            --version-label ${{ env.PIPELINE_ID }} \
            --source-bundle S3Bucket="${{ env.S3_BUCKET }}",S3Key="artifacts/${{ env.PIPELINE_ID }}/Dockerrun.aws.json" \
            --description "Deployment from GitHub Actions - ${{ github.run_id }}"

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name ${{ env.EB_APPLICATION_NAME_STAGE }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME_STAGE }} \
            --version-label ${{ env.PIPELINE_ID }}

      - name: Wait for deployment to complete
        run: |
          aws elasticbeanstalk wait environment-updated \
            --application-name ${{ env.EB_APPLICATION_NAME_STAGE }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME_STAGE }}

      # - name: Get deployment status
      #   run: |
      #     STATUS=$(aws elasticbeanstalk describe-environments \
      #       --application-name ${{ env.EB_APPLICATION_NAME_STAGE }} \
      #       --environment-names ${{ env.EB_ENVIRONMENT_NAME_STAGE }} \
      #       --query "Environments[0].Status" \
      #       --output text)
      #     HEALTH=$(aws elasticbeanstalk describe-environments \
      #       --application-name ${{ env.EB_APPLICATION_NAME_STAGE }} \
      #       --environment-names ${{ env.EB_ENVIRONMENT_NAME_STAGE }} \
      #       --query "Environments[0].Health" \
      #       --output text)
      #     echo "Deployment status: $STATUS"
      #     echo "Deployment health: $HEALTH"

  deploy-prod:
    name: Production Deploy # Deploy to Production Environment with Image from ECR
    needs: build-and-push
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - name: Create new Elastic Beanstalk application version
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name ${{ env.EB_APPLICATION_NAME_PROD }} \
            --version-label ${{ env.PIPELINE_ID }} \
            --source-bundle S3Bucket="${{ env.S3_BUCKET }}",S3Key="artifacts/${{ env.PIPELINE_ID }}/source-code.zip" \
            --description "Deployment from GitHub Actions - ${{ github.run_id }}"
      
      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk update-environment \
            --application-name ${{ env.EB_APPLICATION_NAME_PROD }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME_PROD }} \
            --version-label ${{ env.PIPELINE_ID }}
      
      - name: Wait for deployment to complete
        run: |
          aws elasticbeanstalk wait environment-updated \
            --application-name ${{ env.EB_APPLICATION_NAME_PROD }} \
            --environment-name ${{ env.EB_ENVIRONMENT_NAME_PROD }}

      # - name: Get deployment status
      #   run: |
      #     STATUS=$(aws elasticbeanstalk describe-environments \
      #       --application-name ${{ env.EB_APPLICATION_NAME_PROD }} \
      #       --environment-names ${{ env.EB_ENVIRONMENT_NAME_PROD }} \
      #       --query "Environments[0].Status" \
      #       --output text)
      #     HEALTH=$(aws elasticbeanstalk describe-environments \
      #       --application-name ${{ env.EB_APPLICATION_NAME_PROD }} \
      #       --environment-names ${{ env.EB_ENVIRONMENT_NAME_PROD }} \
      #       --query "Environments[0].Health" \
      #       --output text)
      #     echo "Deployment status: $STATUS"
